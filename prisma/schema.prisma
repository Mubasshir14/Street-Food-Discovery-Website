generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  name          String?
  role          UserRole       @default(USER)
  isPremium     Boolean        @default(false)
  status        UserStatus     @default(ACTIVE)
  profilePhoto  String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  posts         Post[]
  comments      Comment[]
  votes         Vote[]
  reviews       Review[]
  subscriptions Subscription[]
}

model Post {
  id          String     @id @default(uuid())
  title       String
  description String
  priceRange  String
  location    String
  image       String?
  categoryId  String
  category    Category   @relation(fields: [categoryId], references: [id])
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  status      PostStatus @default(PENDING)
  isPremium   Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comments    Comment[]
  votes       Vote[]
  reviews     Review[]
}

model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  image     String?
  posts     Post[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vote {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  voteType  VoteType
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      @default(1)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  postId    String
  post      Post     @relation(fields: [postId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Subscription {
  id        String             @id @default(uuid())
  userId    String
  user      User               @relation(fields: [userId], references: [id])
  paymentId String             @unique
  status    SubscriptionStatus
  expiresAt  DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum PostStatus {
  PENDING
  APPROVED
  REJECTED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum VoteType {
  UPVOTE
  DOWNVOTE
}
